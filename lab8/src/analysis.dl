
.decl def(var: symbol, inst: symbol)
.decl use(var: symbol, inst: symbol)

.input def
.output def
.input use
.output use


.decl kill(curr_inst: symbol, old_inst: symbol)
.decl next(curr_inst: symbol, next_inst: symbol)
.decl in(inst: symbol, def_inst: symbol)
.decl out(inst: symbol, def_inst: symbol)

.output kill
.input next
.output next
.output in
.output out


// There exists a function call at intruction inst that reads a tainted input.
.decl taint(inst: symbol)
// There exists an immediate data-flow from instruction from to instruction to.
.decl edge(from: symbol, to: symbol)
// There exists a transitive tainted data-flow from instruction from to instruction to.
.decl path(from: symbol, to: symbol)
// There exists a function call at intruction inst that sanitizes a tainted input.
.decl sanitizer(inst: symbol)
// There exists a division operation at instruction inst whose divisor is variable denom.
.decl div(denom: symbol, inst: symbol)
// There exists a potential exploitable divide-by-zero error at instruction inst.
.decl alarm(inst: symbol)

.input taint
.output taint
.output edge
.output path
.input sanitizer
.output sanitizer
.input div
.output div
.output alarm

/* Reaching definition Analysis */
kill(curr_inst, old_inst) :- def(var, curr_inst), def(var, old_inst).
out(inst, inst) :- def(_, inst).
out(inst, def_inst) :- in(inst, def_inst), !kill(inst, def_inst).
in(inst, def_inst) :- out(prev_inst, def_inst), next(prev_inst, inst).

/* Rules for taint Analysis */
/* TODO: Add the rules for taint analysis */
// from defines a variable var and to uses it

path(a, b) :- taint(a), edge(a, b).
// Block taint propagation if a sanitizer is applied
path(a, c) :- path(a,b), edge(b, c), !sanitizer(b).

edge(from, to) :- def(var, from), use(var, to), in(to, from).

// Raise an alarm if a tainted instruction is involved in a division,
// that is there is a path from a tainted instruction to the division instruction
alarm(inst) :- path(_, to), div(to, inst).